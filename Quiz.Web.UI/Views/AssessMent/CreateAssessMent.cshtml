@model Quiz.Web.DTO.Models.AssesmentPageModal
@{
    ViewBag.Title = "CreateAssessMent";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var existingAssessMentDetails = Model.existingAssessmentDetails;
}

@if (Model != null)
{

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">*@

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.37/css/bootstrap-datetimepicker.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js"></script>
    @*<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.37/js/bootstrap-datetimepicker.min.js"></script>


    @*<link rel="stylesheet" type="text/css" href="~/Content/CSS/datatables.min.css" />

        <script type="text/javascript" src="~/Scripts/Datatable.js"></script>*@

    <style>
        table.dataTable thead .sorting:after, table.dataTable thead .sorting_asc:after, table.dataTable thead .sorting_desc:after {
            opacity: 1.2;
        }

        .bs-wizard {
            margin-top: 40px;
        }

        /*Form Wizard*/
        .bs-wizard {
            border-bottom: solid 1px #e0e0e0;
            padding: 0 0 10px 0;
        }

            .bs-wizard > .bs-wizard-step {
                padding: 0;
                position: relative;
            }

                .bs-wizard > .bs-wizard-step + .bs-wizard-step {
                }

                .bs-wizard > .bs-wizard-step .bs-wizard-stepnum {
                    color: #595959;
                    font-size: 16px;
                    margin-bottom: 5px;
                }

                .bs-wizard > .bs-wizard-step .bs-wizard-info {
                    color: #999;
                    font-size: 14px;
                }

                .bs-wizard > .bs-wizard-step > .bs-wizard-dot {
                    position: absolute;
                    width: 30px;
                    height: 30px;
                    display: block;
                    background: rgb(153, 199, 234);
                    top: 45px;
                    left: 50%;
                    margin-top: -15px;
                    margin-left: -15px;
                    border-radius: 50%;
                }

                    .bs-wizard > .bs-wizard-step > .bs-wizard-dot:after {
                        content: ' ';
                        width: 14px;
                        height: 14px;
                        background: rgb(011,071,117);
                        border-radius: 50px;
                        position: absolute;
                        top: 8px;
                        left: 8px;
                    }

                .bs-wizard > .bs-wizard-step > .progress {
                    position: relative;
                    border-radius: 0px;
                    height: 8px;
                    box-shadow: none;
                    margin: 20px 0;
                }

                    .bs-wizard > .bs-wizard-step > .progress > .progress-bar {
                        width: 0px;
                        box-shadow: none;
                        background: rgb(153, 199, 234);
                    }

                .bs-wizard > .bs-wizard-step.complete > .progress > .progress-bar {
                    width: 100%;
                }

                .bs-wizard > .bs-wizard-step.active > .progress > .progress-bar {
                    width: 50%;
                }

                .bs-wizard > .bs-wizard-step:first-child.active > .progress > .progress-bar {
                    width: 0%;
                }

                .bs-wizard > .bs-wizard-step:last-child.active > .progress > .progress-bar {
                    width: 100%;
                }

                .bs-wizard > .bs-wizard-step.disabled > .bs-wizard-dot {
                    background-color: #f5f5f5;
                }

                    .bs-wizard > .bs-wizard-step.disabled > .bs-wizard-dot:after {
                        opacity: 0;
                    }

                .bs-wizard > .bs-wizard-step:first-child > .progress {
                    left: 50%;
                    width: 50%;
                }

                .bs-wizard > .bs-wizard-step:last-child > .progress {
                    width: 50%;
                }

                .bs-wizard > .bs-wizard-step.disabled a.bs-wizard-dot {
                    pointer-events: none;
                }

        .well {
            padding: 10px;
        }

        #lblAssessMentName {
            margin-top: 10px;
        }

        #imgAddMoreText {
            width: 30px;
        }

        #dvAddMoreText {
            padding: 8px;
        }

            #dvAddMoreText label {
                margin-top: 5px;
            }

        .foreBlue {
            color: rgb(011,017,117);
        }

        hr {
            border: 2px solid #dadada;
        }

        .consider {
            height: 20px;
            width: 20px;
            display: inline-block;
        }

        span.legend.ng-binding.rrbn {
            margin-right: 50px;
            font-weight: 600;
            position: relative;
            top: 0px;
        }

        .rrbntext {
            position: relative;
            top: -5px;
        }
    </style>





    <div class="container-fluid">
        <h3 class="foreBlue">Create Assessment</h3>
    </div>

    <div class="container-fluid">
        <div class="row bs-wizard" style="border-bottom:0;">
            <div class="col-xs-3 bs-wizard-step active" id="dvStepOne">
                <div class="text-center bs-wizard-stepnum">Assessment</div>
                <div class="progress"><div class="progress-bar"></div></div>
                <a href="#" class="bs-wizard-dot"></a>
            </div>
            <div class="col-xs-3 bs-wizard-step disabled" id="dvStepTwo">
                <!-- complete -->
                <div class="text-center bs-wizard-stepnum">Environment</div>
                <div class="progress"><div class="progress-bar"></div></div>
                <a href="#" class="bs-wizard-dot"></a>
            </div>
            <div class="col-xs-3 bs-wizard-step disabled" id="dvStepThree">
                <!-- complete -->
                <div class="text-center bs-wizard-stepnum">Shortlist Criteria</div>
                <div class="progress"><div class="progress-bar"></div></div>
                <a href="#" class="bs-wizard-dot"></a>
            </div>
            <div class="col-xs-3 bs-wizard-step disabled" id="dvStepFour">
                <!-- active -->
                <div class="text-center bs-wizard-stepnum">Scheduling</div>
                <div class="progress"><div class="progress-bar"></div></div>
                <a href="#" class="bs-wizard-dot"></a>
            </div>
        </div>
    </div>

    <div id="divStep1">
        <div class="row">
            <div class="col-md-12">
                <div class="well ds_lightBlue">
                    <div class="input-group">
                        <input type="text" id="txtQuestionBankSearch" class="form-control" placeholder="Search keyword eg : sales,software engineer etc">
                        <input type="hidden" id="hdnQuestionBankSearch" />
                        <span class="input-group-btn">
                            <button class="btn btn-default saveButtonsColor" type="button"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        @if (existingAssessMentDetails.Any())
        {
            <div class="row">
                <div class="table">
                    <table class="table table-striped">
                        <thead>
                            <tr class="tableHeaderBlue">
                                <th>

                                    Assessment
                                </th>
                                <th>Created Date </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < existingAssessMentDetails.Count(); i++)
                            {
                                <tr id="ext_@existingAssessMentDetails[i].ID" style="cursor:pointer" onclick="GetExistingQuestionBankDetails('@existingAssessMentDetails[i].ID')">
                                    <td><span data-toggle="tooltip" data-placement="top" title="@existingAssessMentDetails[i].QuestionbankName"> @existingAssessMentDetails[i].AssessmentName</span> </td>
                                    <td>@existingAssessMentDetails[i].CreatedDate</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        <div class="row">


            <div class="form-group col-lg-8 col-md-8 col-sm-12 col-xs-12">
                <div class="col-md-4"> <label id="lblAssessMentName">Name your assessment </label></div>
                <div class="col-md-6">
                    <input type="text" class="form-control" id="txtAssessmentName" placeholder="ex:Software Engineer" />
                    <span style="color:red;" id="errorAssName"></span>
                </div>
            </div>


            <div style="display:none;" class="col-md-12">
                <div class="well ds_lightBlue">
                    <div class="input-group">
                        <input type="text" id="txtQuestionBankSearch" class="form-control" placeholder="Search keyword eg : sales,software engineer etc">
                        <input type="hidden" id="hdnQuestionBankSearch" />
                        @*<span class="input-group-btn">
                                <button class="btn btn-default ds_darkBlue" type="button"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                            </span>*@
                    </div>
                </div>
            </div>

        </div>

        <hr />
        @*<div class="row">
                <div class="col-md-12 ds_darkBlue" id="dvAddMoreText">
                    <label class="pull-left">Uploaded Question Banks</label>
                    <span hidden class="pull-right"><img id="imgAddMoreText" src="~/Content/Icons/Adding Icon.png" /></span>
                </div>
            </div>*@

        <div class="row">
            <table class="table table-striped" id="tblQuesBank">
                <thead>
                    <tr class="tableHeaderBlue">
                        <th>
                            <input type="checkbox" id="chkCheckAllAssessMent" />
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Questions
                        </th>
                        <th>
                            Duration
                        </th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in Model.LQuestionBankModal)
                    {
                        <tr class="trClsExamSelection" id="trIdExamSelection_@item.Id">
                            <td>
                                <input id=@item.Id type="checkbox" class="chkExamSubjectSelection" />
                            </td>
                            <td>
                                <span id="spnQuestionBankName_@item.Id">@item.QuestionBankName - @item.QuestionBankDescription </span>
                            </td>
                            <td>
                                <span id='spnNoOfQuestions_@item.Id'>@item.NoOfQuestions</span>
                            </td>
                            <td>
                                <span id='spnDuration_@item.Id'>@item.Duration </span>
                            </td>
                        </tr>

                    }

                </tbody>

            </table>
            <span id="errorSelectionExam" style="color:red;"></span>

            <div class="row">
                <div class="col-md-12">
                    @*<input type="button" class="btn ds_darkBlue pull-left" value="Undo Changes" />*@
                    <span class="pull-right"><label>Total Duration</label> <span id="spnTotalDurationLabel"></span> </span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    @*<button class="btn ds_Expired"> Back </button>*@
                    <button id="btnNext1" onclick="return ShowStep2()" class="btn saveButtonsColor">Next </button>
                </div>
            </div>
        </div>
    </div>

    <div class="clearfix"></div>
    <div id="divStep2" style="display:none;">


        <div class="row">
            <h4 class="ds_lightBlue tableHeaderText">
                Proctor These Assessments
            </h4>
            <table class="table table-striped">
                <thead>
                    <tr class="tableHeaderBlue">
                        <th>
                            Auto Proc
                        </th>
                        <th>
                            Status
                        </th>

                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td>
                            <span> Browser Lock </span>
                        </td>
                        <td><input type="checkbox" id="chkBrowserLockOn" class="switchdemo" checked /> </td>
                    </tr>
                    <tr>
                        <td>
                            <span> Print Screen Lock </span>
                        </td>
                        <td><input type="checkbox" id="chkPrintScreenLockOn" class="switchdemo" checked /> </td>
                    </tr>

                </tbody>

            </table>




        </div>


        <div class="row">
            <h4 class="ds_lightBlue tableHeaderText">Assesment Details</h4>
            <table class="table table-striped">
                <thead>
                    <tr class="tableHeaderBlue">
                        <th>
                            Test Name
                        </th>
                        <th>
                            Questions
                        </th>
                        <th>
                            Duration
                        </th>
                        <th>
                            Test Language
                        </th>

                    </tr>
                </thead>
                <tbody id="tbodySelectedAssesments"></tbody>
            </table>


            <br /> <br />  <br />  <br />



            <h4 class="ds_lightBlue tableHeaderText">Candidates details form</h4>
            @*<span>   Do you want to create a new form or use an existing one? </span>
                <input type="radio" name="FormSelection" id="radExistingForm" />Select Existing
                <input type="radio" name="FormSelection" id="radNewForm" checked />Create New*@

            <table class="table table-striped" id="tblCandidateForms">
                <thead>
                    <tr class="tableHeaderBlue">
                        <th>Field Name</th>
                        <th>Field Type</th>
                        <th>Values</th>
                        <th>Mandatory</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in Model.LstCandidateAssesmentDetailsForm)
                    {
                        <tr>
                            <td>
                                @if (item.IsEnabled)
                                {
                                    if (item.IsLocked)
                                    {
                                        <input type="checkbox" class="clsFormSelection" id="@item.id" disabled checked />
                                    }
                                    else
                                    {
                                        <input type="checkbox" class="clsFormSelection" id="@item.id" checked />
                                    }
                                }
                                else
                                {
                                    <input type="checkbox" class="clsFormSelection" id="@item.id" />
                                }
                                <input type="hidden" id="hdnFormId_@item.id" value="@item.id" />
                                @item.DisplayFieldName
                            </td>
                            <td>@item.FieldType</td>
                            <td>@item.Values</td>

                            @if (item.IsMandatory)
                            {
                                if (item.IsLocked)
                                {
                                    <td><input type="checkbox" class="switchdemo" disabled id="mandatory_@item.id" checked /> <i class="fa fa-lock" aria-hidden="true"></i></td>
                                }
                                else
                                {
                                    <td><input type="checkbox" class="switchdemo" id="mandatory_@item.id" checked /> </td>
                                }
                            }
                            else
                            {
                                <td><input type="checkbox" class="switchdemo" id="mandatory_@item.id" /> </td>
                            }
                        </tr>
                    }

                </tbody>
            </table>


            <div class="col-md-12 text-right">
                <button onclick="return ShowStep1()" class="btn ds_Expired"> Back </button>
                <button id="btnNext1" onclick="return ShowStep3()" class="btn saveButtonsColor"> Next </button>
            </div>
        </div>

    </div>



    <div id="divStep3" style="display:none;">

        <h3 class="ds_lightBlue tableHeaderText" style="margin:0px;">Short listing criteria </h3>

        <div style="background:#e4e4e4">
            <div class="col-md-12">
                Do you want to create a new shortlisting criteria or use an existing one?
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-md-12" style="margin-top:20px;">
                <input type="radio" name="ShortListCriteria" id="radExistingShortListCriteria" value="EXISTING" />Select Existing
                <input type="radio" name="ShortListCriteria" id="radNewShortListingCriteria" value="NEW" checked style="margin-left:25px;" />Create New
            </div>
            @*<input type="radio" name="ShortListCriteria" id="radCustomShortListingCriteria" />Custom*@


            <div class="col-md-6" style="margin-bottom:10px;">
                <input type="text" id="txtShortListCriteria" class="form-control" placeholder="Enter a name to save the cutoff" />
                <input type="button" class="btn btn-info" style="display:none;" id="btnSaveCriteria" value="Save New Cutoff" />

            </div>


            <div class="clearfix" style="margin-top:10px;"></div>
            <div class="form-group ds_lightBlue tableHeaderText">
                <div class="grid-legend-band ng-scope" style="position: relative;">
                    <span class="legend ng-binding rrbn">
                        <span class="consider red" style="background: rgb(244, 66, 54);"></span>
                        <span class="rrbntext"> Not Consider</span>
                    </span>
                    <span class="legend ng-binding rrbn">
                        <span class="consider yellow" style="background: rgb(254, 179, 0);"></span>
                        <span class="rrbntext"> May Consider</span>
                    </span>
                    <span class="legend last ng-binding rrbn">
                        <span class="consider blue" style="background: rgb(69, 173, 78);"></span>
                        <span class="rrbntext">  Strong Consider</span>
                    </span>
                </div>
            </div>

            <div id="divNewShortListCriteria">





                <div id="divSliderSetup">
                    @foreach (var item in Model.LQuestionBankModal)
                    {
                        <div class="form-group">
                            <p id="p_slider_@item.Id">
                                <label for="amount">@item.QuestionBankName - @item.QuestionBankDescription</label>
                                <input class="clsSlider" type="text" id="txtSlider_@item.Id" readonly style="border:0; color:#f6931f; font-weight:bold;">
                            </p>

                            <div id="slider-range_@item.Id"></div>
                        </div>
                    }

                </div>
            </div>

            <br />
            <div class="col-md-6">
                <select id="ddlExistingShortListCriteria" class="form-control" style="display:none;margin-bottom:10px;">
                    <option value="">--Select--</option>
                    @foreach (var item in Model.ListEligibilityCriteria.Select(x => new { x.Name, x.EligibilityIdForAssessment }).Distinct())
                    {
                        <option value=@item.EligibilityIdForAssessment>@item.Name</option>
                    }

                </select>
            </div>

            <div style="display:none;" id="tblExistingCriteriaQuestions">
                <table class="table table-striped">
                    <thead>
                        <tr class="tableHeaderBlue">
                            <th>Name </th>
                            <th>Not Consider</th>
                            <th>May Consider</th>
                            <th>Strong Consider</th>
                        </tr>

                    </thead>

                    <tbody id="tbodyExistingCriteria"></tbody>
                </table>

            </div>

            <span id="spnSLErrorMsg" style="color:red;"></span>



        </div>





        <div class="row">
            <div class="col-md-12 text-right">
                <button onclick="return ShowStep2()" class="btn ds_Expired"> Back </button>
                <button id="btnNext1" onclick="return ShowStep4()" class="btn saveButtonsColor"> Next </button>
            </div>
        </div>


    </div>




    <div id="divStep4" style="display:none;">



        <div class="ds_lightBlue tableHeaderText" style="margin-bottom:7px;">Welcome to Step 4 - Scheduling</div>


        <div>
            Date and time details

            <br />

            <label> Country </label> <label>India</label>

            <label> Time Zone </label> <label>(UTC + 5:30) Bombay, Calcutta, Chennai, New Delhi </label>

            <br />

            <div class="col-md-12">
                <div class="col-md-6">
                    <div class='input-group date' id='dtFrom'>
                        <input type='text' id="txtDtFrom" class="form-control" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class='input-group date' id='dtTo'>
                        <input type='text' id="txtDtTo" class="form-control" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>

            </div>

            <br />
            <br />

            <h4 class="tableHeaderText ds_lightBlue">Choose your mode of scheduling </h4>



            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#divbulkschedule" role="tab" aria-controls="home" aria-selected="true">Bulk Schedule</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="profile-tab" data-toggle="tab" href="#divSingleSchedule" role="tab" aria-controls="profile" aria-selected="false">Single Schedule</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="contact-tab" data-toggle="tab" href="#divCommonLogin" role="tab" aria-controls="contact" aria-selected="false">Common Login</a>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade active" id="divbulkschedule" role="tabpanel" aria-labelledby="home-tab">

                    <div class="form-group">
                        <input type="text" class="form-control" id="txtUserTitle" placeholder="Enter User" />
                        <span style="color:red;display:none" id="Er_txtUserTitle">User Title is Required</span>
                    </div>


                    <div class="form-group">
                        <input type="file" class="form-control-file" id="flUsersUpload" />
                        <span style="color:red;display:none" id="Er_flUsersUpload">Please Upload File</span>
                    </div>


                    <div class="form-group">
                        Download Sample
                        <a id="lnkDownloadSample" href="~/Content/sample.xlsx">Download here</a>
                    </div>

                    <table class="table table-striped" style="display:none;">
                        <thead>
                            <tr class="tableHeaderBlue">
                                <th>
                                    Title
                                </th>
                                <th>
                                    Uploaded on
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @*@foreach (var item in Model.LstUserDetailMaster)
                                {
                                    <tr>
                                        <td><input type="checkbox" id="@item.Id" class="clsUploadedStudents" />  @item.UserTitle</td>
                                        <td>@item.CreatedDate.ToShortDateString()</td>
                                    </tr>
                                }*@
                        </tbody>
                    </table>




                </div>

                <div class="tab-pane fade" id="divSingleSchedule" role="tabpanel" aria-labelledby="profile-tab">
                    <h4 class="ds_lightBlue tableHeaderText">Candidate Detail </h4>

                    <div class="form-group">
                        <label>  First Name </label><input class="form-control" type="text" id="txtFirstName" />
                    </div>
                    <div class="form-group">
                        <label> Last Name </label><input type="text" class="form-control" id="txtLastName" />
                    </div>
                    <div class="form-group">
                        <label> Email </label><input type="text" class="form-control" id="txtEmail" />
                    </div>
                    <div class="form-group">
                        <label> User Name <i class="fa fa-asterick iconred"></i> </label><input type="text" class="form-control" id="txtUserName" />
                    </div>
                    <div class="form-group">
                        <label> Password <i class="fa fa-asterick iconred"></i></label> <input type="password" class="form-control" id="txtPassword" />
                    </div>
                    <div class="form-group">
                        <label> Mobile</label> <input class="form-control" type="text" id="txtMobile" />
                    </div>
                    <label> Date of birth</label>

                    <div class='input-group date' id='txtDOB'>
                        <input type='text' class="form-control" id='txtDOBSingle' />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>

                </div>

                <div class="tab-pane fade" id="divCommonLogin" role="tabpanel" aria-labelledby="contact-tab">
                    <div class="form-group">
                        <label> User Name <i class="fa fa-asterick iconred"></i></label> <input type="text" class="form-control" id="txtCommonLoginUserName" />
                    </div>
                    <div class="form-group">
                        <label>  Password <i class="fa fa-asterick iconred"></i></label>  <input type="password" class="form-control" id="txtCommonLoginPassword" />
                    </div>
                    <div class="form-group">
                        <label> No of Candidates <i class="fa fa-asterick iconred"></i></label> <input type="text" class="form-control" id="txtCLNoOfCandidates" />
                    </div>

                    <label>  Send Login Details to  (Enter comma seperated email list.) *</label>

                    <textarea class="form-group" id="txtCLSendLoginDetailsto"></textarea>

                </div>
            </div>


        </div>

        <div>
            <div class="ds_lightBlue tableHeaderText">Assessment completion alert    <input type="checkbox" class="switchdemo" id="chkAlertEmail" /></div>

            <textarea style="display:none;" class="form-control" id="txtAreaAlertEmail" placeholder="Please enter comma separated email id's to receive assessment completion alert. e.g. test@gmail.com,test@yahoo.com"></textarea>


            <h4 class="ds_lightBlue tableHeaderText" style="margin-top:7px;margin-bottom:7px;"> Candidate Notifications</h4>

            <table class="table table-striped">
                <thead>
                    <tr class="tableHeaderBlue">
                        <th>Type</th>
                        <th>Email</th>
                        <th>Content</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td><span id="spnNotificationType"> Assesment Details</span> </td>
                        <td><input type="checkbox" id="chkNotificationEmail" checked /> </td>
                        <td><button id="btnEmailTemplate" style="border: 0;float: none;" tooltip="Select template" class="icon fa fa-pencil action-icon pointer"><div class="disabled-overlay"></div></button></td>
                    </tr>
                </tbody>

            </table>

        </div>


        <div class="row">
            <div class="col-md-12 text-right">
                <button onclick="return ShowStep3()" class="btn ds_Expired"> Back </button>
                <button id="btnSave" onclick="return submitData()" class="btn saveButtonsColor">Submit </button>
            </div>
        </div>

    </div>



    <script type="text/javascript">

        var modelListQB = @Html.Raw(Json.Encode(Model.LQuestionBankModal));

        function ConstructJsonModal()
        {
            debugger;
            var assesmentName = $('#txtAssessmentName').val();
            var LstQuestionBankSelected = new Array();
            for (var i = 0; i < selectedExamSyllabus.length; i++)
            {
                LstQuestionBankSelected.push(selectedExamSyllabus[i].id);
            }
            var IsBrowserLockEnabled =  $('#chkBrowserLockOn').is(':checked');
            var IsPrintScreenLockEnabled = $('#chkPrintScreenLockOn').is(':checked');
            var LstCandidateFormSelectedFields = GetLstCandidateFormSelectedFields();
            var SelectedShortListCriteria = $('#hdnSelectedShortListCriteria').val();
            var ScheduleFrom = $('#txtDtFrom').val();
            var ScheduleTo = $('#txtDtTo').val();
            var schedulePlan = $('#hdnSchedulePlan').val();

            var lstBulkScheduleIds = GetBulkUploadStudentData();

            var SingleScheduleModal = GetSingleScheduleModal();

            var commonLoginModal = GetCommonLoginModal();

            var IsAssessmentCompletionAlertEnabled = $('#chkAlertEmail').is(':checked');
            var AssesmentAlertEmail = $('#txtAreaAlertEmail').val();
            var AssessmentStudentAlertModal = GetAssessmentStudentAlertModal();

            var UploadFileTitle = $('#txtUserTitle').val();





            var postModal = new Array();
            postModal = { AssessmentName : assesmentName,LstQuestionBankSelected:LstQuestionBankSelected,IsBrowserLockEnabled:IsBrowserLockEnabled,
                IsPrintScreenLockEnabled :IsPrintScreenLockEnabled, LstCandidateFormSelectedFields:LstCandidateFormSelectedFields,
                SelectedShortListCriteria :SelectedShortListCriteria,ScheduleFrom:ScheduleFrom,ScheduleTo:ScheduleTo,
                SchedulePlan : schedulePlan,lstBulkScheduleIds:lstBulkScheduleIds,SingleScheduleModal:SingleScheduleModal,IsAssessmentCompletionAlertEnabled:IsAssessmentCompletionAlertEnabled
                ,AssesmentAlertEmail:AssesmentAlertEmail,AssessmentStudentAlertModal:AssessmentStudentAlertModal,CommonLoginModal:commonLoginModal,UploadFileTitle : UploadFileTitle
            };
            return postModal;

        }


        function GetCommonLoginModal()
        {
            debugger;
            var txtCommonLoginUserName = $('#txtCommonLoginUserName').val();
            var txtCommonLoginPassword = $('#txtCommonLoginPassword').val();
            var txtCLNoOfCandidates = $('#txtCLNoOfCandidates').val();
            var txtCLSendLoginDetailsto = $('#txtCLSendLoginDetailsto').val();
            var postData = new Array();
            postData= {CommonLoginUserName:txtCommonLoginUserName, CommonLoginPassword:txtCommonLoginPassword, CLNoOfCandidates:txtCLNoOfCandidates,CLSendLoginDetailsto:txtCLSendLoginDetailsto};
            return postData;

        }


        function GetLstCandidateFormSelectedFields()
        {
            debugger;
            var postData = new Array();
            $('.clsFormSelection').each(function (i, obj) {
                var elementId = obj.id;
                if($('#'+elementId).is(':checked'))
                {
                    var isMandatory = $('#mandatory_'+elementId).is(':checked');
                    var selectedData = {IsMandatory :isMandatory , FormId : elementId  };
                    postData.push(selectedData);
                }
            });
            return postData;
        }


        function GetBulkUploadStudentData()
        {
            var postData = new Array();
            $('.clsUploadedStudents').each(function (i, obj) {
                var elementId = obj.id;
                if($('#'+elementId).is(':checked'))
                {
                    postData.push(elementId);
                }
            });
            return postData;

        }



        function GetSingleScheduleModal()
        {
            debugger;
            var FirstName = $('#txtFirstName').val();
            var LastName = $('#txtLastName').val();
            var Email = $('#txtEmail').val();
            var UserName = $('#txtUserName').val();
            var Password = $('#txtPassword').val();
            var Mobile = $('#txtMobile').val();
            var DOB = $('#txtDOBSingle').val();
            var postData = new Array();
            postData= {FirstName:FirstName, LastName:LastName, Email:Email,UserName:UserName,Password:Password,Mobile:Mobile,DOB:DOB};
            return postData;
        }


        function GetAssessmentStudentAlertModal()
        {
            var chkNotificationEmail =  $('#chkNotificationEmail').is(':checked');
            var txtCCEMail = $('#txtCCEMail').val();
            var txtBCCEMail = $('#txtBCCEMail').val();
            var emailBody = $('#emailBody').val();
            var type = $('#spnNotificationType').text();
            var CommunicationType = 'EMAIL';

            var postData = new Array();

            postData= {IsEnabled : chkNotificationEmail , Type : type, CommunicationType:CommunicationType , BodyofMessage:emailBody,CC: txtCCEMail ,
                BCC:txtBCCEMail};

            return postData;


        }



        function ValidateFormSubmission()
        {
            debugger;
            return true;
        }


        function submitData()
        {
            debugger;
            if(ValidateFormSubmission())
            {
                var postData =  ConstructJsonModal();
                var postPreferenceData = JSON.stringify({
                    'postAssessmentModal': postData
                });

                try {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("PostCreateAssessment", "AssessMent")",
                        contentType: 'application/json; charset=utf-8',
                        data: postPreferenceData,
                        beforeSend: function () {

                        },
                        complete: function () {

                        },
                        success: function (data) {
                            debugger;
                            if(data.Result == 'Success')
                            {
                                successFulAlert("Assessment Created Successfully.");
                                window.location.reload();
                            }
                            else {
                                failureAlert("Something went wrong.")
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            console.log(xhr.status);
                            console.log(xhr.responseText);
                            console.log(thrownError);
                        },
                        cache: false
                    });
                }
                catch (err) {
                    console.log(err);
                }
            }
            else {
                warningAlert("Please fill all mandatory fields.");
            }
        }



        $(function () {
            //$('#dtFrom').datetimepicker();
            //$('#dtTo').datetimepicker();
            //$('#txtDOB').datetimepicker();


            $('#dtFrom').datetimepicker({
                defaultDate: moment(),
                sideBySide: true
            });

            $('#dtTo').datetimepicker({
                defaultDate: moment().add(24, 'hours'),
                sideBySide: true
            });

            $('#txtDOB').datetimepicker({
                defaultDate: moment(),
                sideBySide: true
            });

        });


        var selectedExamSyllabus = new Array();
        function ShowStep1() {
            $('#divStep1').show();
            $('#divStep2').hide();
            $('#divStep3').hide();
            $('#divStep4').hide();

            $('#dvStepOne').addClass('active').removeClass('disabled');
            $('#dvStepTwo').removeClass('active').addClass('disabled');
            $('#dvStepThree').removeClass('active').addClass('disabled');
            $('#dvStepFour').removeClass('active').addClass('disabled');
        }

        var IsDirectEnvironment = false;

        function ShowStep2() {
            var validateStatus = false;
            if (IsDirectEnvironment == false) {
                validateStatus = ValidateStep2();
            }
            if (IsDirectEnvironment == true && validateStatus == false) {
                validateStatus = true;
            }
             
            if (validateStatus) {
                $('#divStep1').hide();
                $('#divStep2').show();
                $('#divStep3').hide();
                $('#divStep4').hide();
                debugger;
                $('#tbodySelectedAssesments').empty();
                for (var i = 0; i < selectedExamSyllabus.length; i++)
                {
                    $('#tbodySelectedAssesments').append('<tr>');
                    var questBankname = selectedExamSyllabus[i].QuestionBankName;
                    var noOfQues = selectedExamSyllabus[i].NoOfQuestions;
                    var duration = selectedExamSyllabus[i].Duration;
                    $('#tbodySelectedAssesments').append('<td>' + questBankname + '</td>');
                    $('#tbodySelectedAssesments').append('<td>' + noOfQues + '</td>');
                    $('#tbodySelectedAssesments').append('<td>' + duration + '</td>');
                    $('#tbodySelectedAssesments').append('<td>English</td>');
                    $('#tbodySelectedAssesments').append('</tr>');


                }

                $('.chkExamSubjectSelection').each(function (i, obj) {
                    if ($('#' + obj.id).is(':checked')) {
                        $('#p_slider_'+ obj.id).show();
                        $('#slider-range_'+ obj.id).show();
                    }
                    else
                    {
                        $('#p_slider_'+ obj.id).hide();
                        $('#slider-range_'+ obj.id).hide();

                    }
                });


                IsDirectEnvironment = false;

                $('#dvStepOne').addClass('complete').removeClass('disabled').removeClass("active");
                $('#dvStepTwo').addClass('active').removeClass('disabled');
                $('#dvStepThree').removeClass('active').addClass('disabled');
                $('#dvStepFour').removeClass('active').addClass('disabled');
            }
            else {
                //alert("Please fill all mandatory fields to go forward");
            }

        }

        function ValidateStep2() {
            var returnStatus = true;
            $('#errorAssName').text('');
            //Step 1 with name
            var assesmentName = $('#txtAssessmentName').val();
            if (assesmentName == null || assesmentName == '') {
                $('#errorAssName').text('Please enter name to go step 2');
                returnStatus = false;
            }
            else {
                var validationResult = ValidateAssesmentName(assesmentName);
                if(!validationResult)
                {
                    $('#errorAssName').text('Assesment name already available. Please try with another assesment name. ');
                    returnStatus = false;
                }
                //$('#errorAssName').text('');
            }
            //Step 2 with selection

            var anyoneSelected = false;
            $('.chkExamSubjectSelection').each(function (i, obj) {
                var elementId = obj.id;
                if ($('#' + elementId).is(':checked')) {
                    anyoneSelected = true;
                }
            });

            if (!anyoneSelected) {
                $('#errorSelectionExam').text('Please select any one in table.');
                returnStatus = false;
            }
            else {
                $('#errorSelectionExam').text('');
            }
            return returnStatus;
        }

        function ValidateAssesmentName(assesmentName)
        {
            var returnResult = true;
            debugger;
            var postUserData = JSON.stringify({ 'AssesmentName': assesmentName });

            $.ajax({
                type: "POST",
                url: "@Url.Action("ValidateAssesmentName", "AssessMent")",
                contentType: 'application/json; charset=utf-8',
                data:  postUserData,
                beforeSend: function () {

                },
                complete: function () {

                },
                success: function (data) {
                    debugger;
                    if(data.Result == 'AVAILABLE')
                    {
                        returnResult = false;
                    }

                },
                error: function (xhr, ajaxOptions, thrownError) {  debugger;
                    console.log(xhr.status);
                    console.log(xhr.responseText);
                    console.log(thrownError);
                },
                cache: false,
                async:false
            });

            return returnResult;


        }

        function ValidateStep3() {
            var returnStatus = true;


            return returnStatus;
        }




        function ShowStep3() {
            var validateStatus = ValidateStep3();
            if (validateStatus) {
                $('#divStep1').hide();
                $('#divStep2').hide();
                $('#divStep3').show();
                $('#divStep4').hide();

                $('#dvStepOne').addClass('complete').removeClass('disabled').removeClass('active');
                $('#dvStepTwo').addClass('complete').removeClass('disabled').removeClass('active');
                $('#dvStepThree').addClass('active').removeClass('disabled');
                $('#dvStepFour').removeClass('active').addClass('disabled');
            }
            else {
                //alert("Please fill all mandatory fields to go forward");
            }
        }

        function ShowStep4() {
            var validateStatus = ValidateStep4();
            if (validateStatus) {
                $('#divStep1').hide();
                $('#divStep2').hide();
                $('#divStep3').hide();
                $('#divStep4').show();

                $('#dvStepOne').addClass('complete').removeClass('disabled').removeClass('active');
                $('#dvStepTwo').addClass('complete').removeClass('disabled').removeClass('active');
                $('#dvStepThree').addClass('complete').removeClass('disabled').removeClass('active');
                $('#dvStepFour').addClass('active').removeClass('disabled');
            }
            else {
                //alert("Please fill all mandatory fields to go forward");
            }
        }

        function ValidateStep4() {
            var returnStatus = true;
            var selectedShortList = $('input[name=ShortListCriteria][type="radio"]:checked').val();
            if(selectedShortList == 'EXISTING')
            {
                var savedCriteria = $('#hdnSelectedShortListCriteria').val();
                if(savedCriteria == "")
                {
                    $('#spnSLErrorMsg').text('Shortlist Criteria not selected. Please select valid criteria for assesment');
                    returnStatus = false;
                }
            }
            else
            {
                var savedCriteria = $('#hdnSelectedShortListCriteria').val();
                if(savedCriteria == "")
                {
                    returnStatus = SaveCriteria();
                }
                savedCriteria = $('#hdnSelectedShortListCriteria').val();
                if(savedCriteria == "")
                {
                    $('#spnSLErrorMsg').text('Please give valid Criteria name');
                    returnStatus = false;
                }
                if(!returnStatus)
                {
                    var spantext = $('#spnSLErrorMsg').text();
                    if(spantext == '')
                    {
                        $('#spnSLErrorMsg').text('Oops something went wrong. Please try again with another short list criteria');
                    }
                }
            }

            return returnStatus;
        }







        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            $(".switchdemo").simpleSwitch();

            var files;
            $(document).on('change', '#flUsersUpload', function (e) {
                debugger;
                files = e.target.files;
                var isValidFiles = true;
                var UserTitle = $("#txtUserTitle").val();
                var finalStatus = false;
                $('#file-error1').text('');
                var file_size = $('#flUsersUpload')[0].files[0].size;
                if (file_size < 120000) {
                    $(files).each(function () {
                        var filename = this.name;
                        if ((filename.toUpperCase().indexOf(".XLSX") == -1) || (filename.toUpperCase().indexOf(".XLS")) == -1) {
                            isValidFiles = false;
                        }
                    });
                    if (isValidFiles) {
                        ContactFile = e.target.files;

                    }
                    else {
                        $('#mdlmessage').text('Choose Only .xlsx or xlx File');
                        $('#modalPopUp').addClass("is-visible");
                        $("#chooseContactsFile").val("");
                    }
                }
                else {
                    $('.box-error').css("border-color", "#FF0000");
                    $('#file-error1').text('File size must be less than 120KB');
                    $("#chooseContactsFile").val("");
                }
            });





            $("#txtAssessmentName").keypress(function () {
                debugger
                var assesmentName =  $("#txtAssessmentName").val();
                if(assesmentName != '')
                {
                    $('#errorAssName').text('');
                }
            });




            $('#tblQuesBank').DataTable({
                columnDefs: [
                ],
                paging: true,
                searching: true,
                "aaSorting": [],
                "ordering": false
            });

            $('#tblCandidateForms').DataTable({
                columnDefs: [
                ],
                paging: true,
                searching: true,
                "aaSorting": [],
                "ordering": false
            });




            $("#txtQuestionBankSearch").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Url.Action("LoadAutoFillQuestionBankNames", "AssessMent")/",
                        type: "GET",
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        data: { term: request.term,  maxNoRecord: 10},
                        dataFilter: function (data) { return data; },
                        success: function (data) {
                            debugger;
                            response($.map(data, function (item) {
                                return { label: item.QuestionBankName, value: item.QuestionBankName, id: item.Id };
                            }))
                        }
                    })
                },
                select: function (event, ui) {
                    debugger;
                    $("#txtQuestionBankSearch").val(ui.item.label);
                    $("#hdnQuestionBankSearch").val(ui.item.id);

                    $('.chkExamSubjectSelection').each(function (i, obj) {
                        //$('#' + obj.id).prop('checked', true);
                        //if ($('#' + obj.id).is(':checked')) {
                        var elementId = obj.id;
                        if(elementId == ui.item.id)
                        {
                            $('#trIdExamSelection_' + ui.item.id).show();
                        }
                        else{
                            $('#trIdExamSelection_' + elementId).hide();
                        }
                    });

                },
                messages: {
                    noResults: "",
                    results: function (resultsCount) {                }
                },
                minLength: 1
            }).keyup(function (e) {
                if (e.which === 13) {
                    $(".ui-menu-item").hide();
                }
            });





            //$("#btnSaveCriteria").click(function () {


            //});



            $('#txtQuestionBankSearch').change(function () {
                debugger;

                var elementValue = $('#txtQuestionBankSearch').val();
                if(elementValue == '')
                {
                    $('.chkExamSubjectSelection').each(function (i, obj) {
                        //$('#' + obj.id).prop('checked', true);
                        //if ($('#' + obj.id).is(':checked')) {
                        var elementId = obj.id;
                        $('#trIdExamSelection_' + elementId).show();
                    });
                }

            });

            $('#ddlExistingShortListCriteria').change(function () {
                debugger;



                var selectedEligibilityCriteria =  $('#ddlExistingShortListCriteria').val();
                var availableStatus = true;
                var modelListELQB = @Html.Raw(Json.Encode(Model.ListEligibilityCriteria));

                var selectedQuestionBankIds = new Array();
                var availableQuestionBankIds = new Array();
                for(var i=0;i<modelListELQB.length;i++)
                {
                    if(modelListELQB[i].EligibilityIdForAssessment == selectedEligibilityCriteria)
                    {
                        availableQuestionBankIds.push(modelListELQB[i].QuestionBankID)
                    }
                }


                $('.chkExamSubjectSelection').each(function (i, obj) {
                    var elementId = obj.id;
                    selectedQuestionBankIds.push(elementId);
                });




                $('#hdnSelectedShortListCriteria').val('');

                var is_same = selectedQuestionBankIds.length == availableQuestionBankIds.length && selectedQuestionBankIds.every(function(element, index) {
                    return element === availableQuestionBankIds[index];
                });

                if(!is_same)
                {
                    $('#tblExistingCriteriaQuestions').hide();
                    $('input[name=ShortListCriteria][id=radNewShortListingCriteria][type="radio"]').prop('checked',true);
                    $('#ddlExistingShortListCriteria').val('');
                    $('input[name=ShortListCriteria][type="radio"]:checked').change();
                    warningAlert("Assesment Section doesn't match. Please go with new criteria");
                }
                else
                {
                    $('#tbodyExistingCriteria').empty();
                    for(var i=0;i<modelListELQB.length;i++)
                    {
                        if(modelListELQB[i].EligibilityIdForAssessment == selectedEligibilityCriteria)
                        {
                            var questionBankName = GetQuestionBankNameBasedonId(modelListELQB[i].QuestionBankID)
                            var trRowInfo  = '<tr><td>'+questionBankName + ' </td> <td>'+modelListELQB[i].NotConsider + ' </td> <td>'+modelListELQB[i].MayConsider + ' </td> <td>'+modelListELQB[i].StrongConsider + ' </td>  </tr> '
                            $('#tbodyExistingCriteria').append(trRowInfo);
                        }

                    }
                    $('#tblExistingCriteriaQuestions').show();
                    $('#hdnSelectedShortListCriteria').val(selectedEligibilityCriteria);
                }
            });




            $("input[name='ShortListCriteria']").change(function () {
                debugger;
                $('#spnSLErrorMsg').text('');
                var selectedShortList = $('input[name=ShortListCriteria][type="radio"]:checked').val();
                if(selectedShortList == 'EXISTING')
                {
                    $('#divNewShortListCriteria').hide();
                    $('#ddlExistingShortListCriteria').show();
                }
                else{
                    $('#ddlExistingShortListCriteria').hide();
                    $('#divNewShortListCriteria').show();
                }
            });




            $('#home-tab').click();

            $('#chkCheckAllAssessMent').change(function () {
                selectedExamSyllabus = new Array();
                var totalDuration = '00:00';
                var t1 = "00:00";
                var minutes  = 0;
                var seconds = 0;
                var tmpSec = 0;
                var anyoneSelected = false;

                if ($('#chkCheckAllAssessMent').is(':checked')) {
                    $('.chkExamSubjectSelection').each(function (i, obj) {
                        $('#' + obj.id).prop('checked', true);
                        var elementId = obj.id;
                        var QuestionBankName = $('#spnQuestionBankName_' + obj.id).text();
                        var NoOfQuestions = $('#spnNoOfQuestions_' + obj.id).text();
                        var Duration = $('#spnDuration_' + obj.id).text();
                        var elementSelection = { id : elementId, QuestionBankName: QuestionBankName, NoOfQuestions: NoOfQuestions, Duration: Duration };
                        selectedExamSyllabus.push(elementSelection);

                        var minSec = Duration;
                        var timeParts = minSec.split(":");
                        minutes = minutes + parseInt(timeParts[0]);
                        seconds = seconds + parseInt(timeParts[1]);

                    });

                    if (seconds > 60){
                        tmpSec = Math.round(seconds / 60);
                        seconds = seconds % 60;
                    }

                    tmpMins = minutes + parseInt(tmpSec);
                    finalOutput = tmpMins + ":" + seconds;
                    $('#spnTotalDurationLabel').text(finalOutput);

                    if(anyoneSelected)
                    {
                        $('#errorSelectionExam').text('');
                    }


                }
                else {
                    $('.chkExamSubjectSelection').each(function (i, obj) {
                        $('#' + obj.id).prop('checked', false);
                    });
                    $('#spnTotalDurationLabel').text(totalDuration);

                }
            });

            $('#chkAlertEmail').change(function () {
                if ($('#chkAlertEmail').is(':checked')) {
                    $('#txtAreaAlertEmail').show();
                }
                else{
                    $('#txtAreaAlertEmail').hide();
                }
            });


            $('.chkExamSubjectSelection').change(function () {
                debugger;
                selectedExamSyllabus = new Array();
                var totalDuration = '00:00';
                var t1 = "00:00";
                var count =0;
                var minutes  = 0;
                var seconds = 0;
                var tmpSec = 0;
                var anyoneSelected = false;
                var totalExamCount =  '@Model.LQuestionBankModal.Count()';

                $('.chkExamSubjectSelection').each(function (i, obj) {
                    //$('#' + obj.id).prop('checked', true);
                    if ($('#' + obj.id).is(':checked')) {
                        anyoneSelected = true;
                        var elementId = obj.id;
                        var QuestionBankName = $('#spnQuestionBankName_' + obj.id).text();
                        var NoOfQuestions = $('#spnNoOfQuestions_' + obj.id).text();
                        var Duration = $('#spnDuration_' + obj.id).text();

                        var minSec = Duration;
                        var timeParts = minSec.split(":");
                        minutes = minutes + parseInt(timeParts[0]);
                        seconds = seconds + parseInt(timeParts[1]);

                        var elementSelection = { id: elementId, QuestionBankName: QuestionBankName, NoOfQuestions: NoOfQuestions, Duration: Duration };
                        selectedExamSyllabus.push(elementSelection);
                        count = count + 1;
                    }
                });


                if (seconds > 60){
                    tmpSec = Math.round(seconds / 60);
                    seconds = seconds % 60;
                }

                tmpMins = minutes + parseInt(tmpSec);
                finalOutput = tmpMins + ":" + seconds;
                $('#spnTotalDurationLabel').text(finalOutput);

                if(anyoneSelected)
                {
                    $('#errorSelectionExam').text('');
                }

                if(totalExamCount == count)
                {
                    $('#chkCheckAllAssessMent').prop('checked',true);
                }
                else{
                    $('#chkCheckAllAssessMent').prop('checked',false);
                }
            });



            $('#btnEmailTemplate').click(function () {
                $('#modalEmailTemplate').modal('show');
            });



        });




        var modelListQB = @Html.Raw(Json.Encode(Model.LQuestionBankModal));

        $(function () {

            debugger;
            var modelListQB = @Html.Raw(Json.Encode(Model.LQuestionBankModal));

            for(var items = 0 ; items < modelListQB.length;items++ )
            {
                debugger;
                var halfScore =  modelListQB[items].NoOfQuestions / 2;
                var fullScore = modelListQB[items].NoOfQuestions;
                $("#slider-range_"+ modelListQB[items].Id).slider({
                    range: true,
                    min: 0,
                    max: fullScore,
                    values: [halfScore, fullScore-2],
                    //max: 500,
                    //values: [75, 300],
                    slide: function (event, ui) {
                        debugger
                        var modelListQB = @Html.Raw(Json.Encode(Model.LQuestionBankModal));
                        if(event != null)
                        {
                            if(event.toElement !=null)
                            {
                                if(event.toElement.offsetParent !=null)
                                {
                                    var elementId = event.toElement.id;
                                    elementId = elementId.replace("slider-range_","");
                                    $("#txtSlider_" + elementId).val("" + ui.values[0] + "-" + ui.values[1]);
                                    $("#" + event.toElement.offsetParent.id).val("" + $("#slider-range_"+ elementId).slider("values", 0) + "-" + $("#slider-range_"+ elementId).slider("values", 1));
                                }
                                else{
                                    $("#txtSlider_"+ modelListQB[items].Id).val("" + ui.values[0] + "-" + ui.values[1]);
                                    $("#txtSlider_"+ slider-range_[items].Id).val("" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 0) + "-" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 1));
                                }
                            }
                            else{
                                $("#txtSlider_"+ modelListQB[items].Id).val("" + ui.values[0] + "-" + ui.values[1]);
                                $("#txtSlider_"+ modelListQB[items].Id).val("" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 0) + "-" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 1));
                            }
                        }
                        else
                        {
                            $("#txtSlider_"+ modelListQB[items].Id).val("" + ui.values[0] + "-" + ui.values[1]);
                            $("#txtSlider_"+ modelListQB[items].Id).val("" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 0) + "-" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 1));
                        }
                    }
                });
                $("#txtSlider_"+ modelListQB[items].Id).val("" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 0) + "-" + $("#slider-range_"+ modelListQB[items].Id).slider("values", 1));
            }








        });


        function GetQuestionBankNameBasedonId(QuestionBankID)
        {
            var questionBankName = '';
            $('.chkExamSubjectSelection').each(function (i, obj) {
                var elementId = obj.id;
                if(elementId == QuestionBankID)
                {
                    questionBankName = $('#spnQuestionBankName_' + elementId).text();

                }
            });
            return  questionBankName;

        }



        function SaveCriteria()
        {
            $('#spnSLErrorMsg').text('');
            debugger;
            var returnresult = false;
            var txtShortListCriteria = $('#txtShortListCriteria').val();
            if(txtShortListCriteria == '')
            {
                $('#spnSLErrorMsg').text('Please give valid name for new criteria');
                return false;
            }
            else{

                var postDataForEligibilityCriteria = new Array();
                $('.chkExamSubjectSelection').each(function (i, obj) {
                    if ($('#' + obj.id).is(':checked')) {
                        //NotConsider	MayConsider	StrongConsider
                        debugger;
                        var sliderVal = $('#txtSlider_'+ obj.id).val();
                        if(sliderVal != '')
                        {
                            var NotConsider = sliderVal.split("-")[0];
                            var MayConsider = sliderVal.split("-")[1];
                            var StrongConsider = $('#spnNoOfQuestions_' + obj.id).text();

                            var postData = {QuestionBankID :  obj.id , Name : txtShortListCriteria, NotConsider :NotConsider , MayConsider : MayConsider,StrongConsider:StrongConsider };
                            postDataForEligibilityCriteria.push(postData);
                        }
                    }
                });

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("SaveEligibleCriteria", "AssessMent")",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        'lstpostAssessmentModal': postDataForEligibilityCriteria
                    }) ,
                    beforeSend: function () {

                    },
                    complete: function () {

                    },
                    success: function (data) {
                        if(data.Result == 'Success')
                        {
                            if(data.ReturnPostEligibileCriteria == "ALREADY AVAILABLE")
                            {

                                $('#hdnSelectedShortListCriteria').val('');
                                returnresult = false;
                            }
                            else
                            {
                                $('#hdnSelectedShortListCriteria').val(data.ReturnPostEligibileCriteria);
                                returnresult = true;
                            }

                        }
                        else
                        {
                            failureAlert("Something went wrong with saving your criteria");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.status);
                        console.log(xhr.responseText);
                        console.log(thrownError);
                    },
                    cache: false,
                    async:false
                });
            }
            return returnresult;
        }

        function GetExistingQuestionBankDetails(assessmentId) {
            debugger;
            if (assessmentId != null && assessmentId != undefined && assessmentId != "") {

                $.ajax({

                    type: "POST",
                    url: "@Url.Action("GetExistingQuestionBankDetails", "AssessMent")?assessmentId=" + assessmentId,
                    dataType: "json",
                    beforeSend: function () {
                    },
                    complete: function () {

                                            },
                    success: function (data) {
                        debugger;
                        console.log(data);
                        if (data.questions!=null) {
                            selectedExamSyllabus = new Array();
                            var questions = data.questions;
                            var questionsLength = questions.length;
                            if (questions.length > 0) {

                                for (var i = 0; i < questionsLength; i++) {
                                    var elementId = questions[i].id;
                                    var QuestionBankName = questions[i].QuestionBankName;
                                    var NoOfQuestions = questions[i].NoOfQuestions;
                                    var Duration = questions[i].Duration;
                                    var hours = Duration.Hours;
                                    var minutes = Duration.Minutes;
                                    var seconds = Duration.Seconds;
                                    hours = parseFloat(hours).toFixed(2);
                                    minutes = parseFloat(minutes).toFixed(2);
                                    seconds = parseFloat(seconds).toFixed(2);
                                    var finalDuration = hours + ":" + minutes + ":" + seconds;
                                    var elementSelection = { id: elementId, QuestionBankName: QuestionBankName, NoOfQuestions: NoOfQuestions, Duration: finalDuration };
                                    selectedExamSyllabus.push(elementSelection);
                                    IsDirectEnvironment = true;
                                    ShowStep2();
                                }
                            }

                        }
                    }

                });
            }
        }

    </script>





    <!-- Modal -->
    <div class="modal fade" id="modalEmailTemplate" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Assessment Alert Content</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    Template <select>
                        <option selected>Default Template</option>
                    </select>
                    <br />

                    CC <input type="text" id="txtCCEMail" />
                    <br />
                    BCC <input type="text" id="txtBCCEMail" />
                    <br />
                    Email Body
                    <textarea id="emailBody">

  Hi,

This is an auto generated e-mail containing your login details for %companyName% hiring assessment.

URL to login - %testUrl%
User Name - %username%
Password - %password%
Assessment Name - %assessmentName%

The above login details are valid from %startDateTime% to %endDateTime%. You need to begin the test within the specified time interval.

Kindly read the instructions given before you proceed.
1) Do not copy paste the User Name and Password. Always type in.
2) Complete the test in one go.
3) This is a timed test, it is essential to keep track of time while answering the questions.
4) Answer all the questions and complete all the modules.

Please note that you can attempt the test only once using this User ID and Password

Thanks

</textarea>
                    <br />



                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" id="saveContent">Save changes</button>
                </div>
            </div>
        </div>
    </div>

}




<input type="hidden" id="hdnSelectedShortListCriteria" />